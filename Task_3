import pygame
import numpy as np
from queue import PriorityQueue

# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Set the dimensions of the grid
GRID_SIZE = 20
GRID_WIDTH = 800
GRID_HEIGHT = 800

# Set the dimensions of each cell
CELL_WIDTH = GRID_WIDTH // GRID_SIZE
CELL_HEIGHT = GRID_HEIGHT // GRID_SIZE

# Initialize the pygame module
pygame.init()

# Set the size of the display window
WINDOW_SIZE = (GRID_WIDTH, GRID_HEIGHT)
screen = pygame.display.set_mode(WINDOW_SIZE)
pygame.display.set_caption("Drone Simulation")

# Define the Node class for the A* algorithm
class Node:
    def __init__(self, row, col):
        self.row = row
        self.col = col
        self.g = 0
        self.h = 0
        self.f = 0
        self.parent = None

    def __lt__(self, other):
        return self.f < other.f

    def __eq__(self, other):
        return self.row == other.row and self.col == other.col

# Define the A* algorithm
def astar(grid, start, end):
    # Initialize the start and end nodes
    start_node = Node(start[0], start[1])
    end_node = Node(end[0], end[1])

    # Initialize the open and closed sets
    open_set = PriorityQueue()
    open_set.put(start_node)
    closed_set = set()

    # Loop until the end node is reached or the open set is empty
    while not open_set.empty():
        # Get the node with the lowest f value
        current_node = open_set.get()

        # Check if the current node is the end node
        if current_node == end_node:
            path = []
            while current_node is not None:
                path.append((current_node.row, current_node.col))
                current_node = current_node.parent
            return path[::-1]